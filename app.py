# app.py

import streamlit as st

from constants import OPTIONS
from sidebar import get_selected_option
from data_loader import load_main_csv, load_upcoming_csv
from parsers import (
    parse_followers,
    parse_price,
    parse_rating,
    parse_discount,
    parse_peak,
    parse_release_date,
)
from charts import (
    display_discount_analysis,
    display_price_vs_gain,
    display_segmentation,
    display_discount_rescue,
    display_value_analysis,
    display_over_under_rated,
    display_unexpected_hits,
    display_growth_potential,
    display_heatmap_rating_price,
    display_launch_efficiency,
)


def main():
    st.set_page_config(page_title="Steam Game Analysis", layout="wide")
    st.markdown(
        "<h1 style='text-align: center;'>üéÆ Analysis of Steam game popularity and releases</h1>",
        unsafe_allow_html=True,
    )

    # Sidebar selector
    selected = get_selected_option(OPTIONS)
    st.markdown(f"### üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞: {selected}")

    # Load the appropriate CSV(s)
    df_main = None
    df_upcoming = None
    if selected != "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ö—ñ—Ç–∏ –∑ –º–∞–ª–∏–º —Ñ–æ–ª–æ–≤–æ–º":
        df_main = load_main_csv()
    else:
        df_upcoming = load_upcoming_csv()

    # Dispatch to the right analysis
    if selected == "–í–ø–ª–∏–≤ –∑–Ω–∏–∂–∫–∏ –Ω–∞ –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏":
        if df_main is not None:
            display_discount_analysis(df_main)

    elif selected == "–¶—ñ–Ω–∞ –≥—Ä–∏ vs –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏":
        if df_main is not None:
            display_price_vs_gain(df_main)

    elif selected == "–°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–∞ —Ü—ñ–Ω–æ—é —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º":
        if df_main is not None:
            display_segmentation(df_main)

    elif selected == "–ß–∏ —Ä—è—Ç—É—î –∑–Ω–∏–∂–∫–∞ –ø–æ–≥–∞–Ω—ñ —ñ–≥—Ä–∏":
        if df_main is not None:
            display_discount_rescue(df_main)

    elif selected == "–í–∏–≥—ñ–¥–Ω—ñ—Å—Ç—å –≥—Ä–∏":
        if df_main is not None:
            display_value_analysis(df_main)

    elif selected == "–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ –π –Ω–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏":
        if df_main is not None:
            display_over_under_rated(df_main)

    elif selected == "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ö—ñ—Ç–∏ –∑ –º–∞–ª–∏–º —Ñ–æ–ª–æ–≤–æ–º":
        if df_upcoming is not None:
            display_unexpected_hits(df_upcoming)

    elif selected == "–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≥—Ä–∏":
        if df_main is not None:
            display_growth_potential(df_main)

    elif selected == "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥ + —Ü—ñ–Ω–∞ vs –æ–Ω–ª–∞–π–Ω":
        if df_upcoming is not None:
            display_heatmap_rating_price(df_upcoming)

    elif selected == "–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –≥—Ä–∏":
        if df_main is not None:
            display_launch_efficiency(df_main)

    else:
        st.error("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")


if __name__ == "__main__":
    main()
