import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import os
import numpy as np

st.set_page_config(page_title="Steam Game Analysis", layout="wide")

st.markdown("<h1 style='text-align: center;'>üéÆ Analysis of Steam game popularity and releases</h1>", unsafe_allow_html=True)

# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π
options = [
    "–í–ø–ª–∏–≤ –∑–Ω–∏–∂–∫–∏ –Ω–∞ –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏",
    "–¶—ñ–Ω–∞ –≥—Ä–∏ vs –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏",
    "–°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–∞ —Ü—ñ–Ω–æ—é —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
    "–ß–∏ —Ä—è—Ç—É—î –∑–Ω–∏–∂–∫–∞ –ø–æ–≥–∞–Ω—ñ —ñ–≥—Ä–∏",
    "–í–∏–≥—ñ–¥–Ω—ñ—Å—Ç—å –≥—Ä–∏",
    "–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ –π –Ω–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏",
    "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ö—ñ—Ç–∏ –∑ –º–∞–ª–∏–º —Ñ–æ–ª–æ–≤–æ–º",
    "–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≥—Ä–∏",
    "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥ + —Ü—ñ–Ω–∞ vs –æ–Ω–ª–∞–π–Ω",
    "–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"
]

# –û–¥–∏–Ω radio –≤ sidebar
selected = st.sidebar.radio("üîç –û–±–µ—Ä—ñ—Ç—å –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", options)
# –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
st.markdown(f"### üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞: {selected}")

# –ü—É—Ç—å –∫ CSV
csv_path = "/Users/aroslavgladkij/Documents/GitHub/steamdb/steamdb.csv"  # <-- –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
csv_path_raiting = "/Users/aroslavgladkij/Documents/GitHub/steamdb/steamdb_upcoming.csv" 

# –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞
if selected == "–í–ø–ª–∏–≤ –∑–Ω–∏–∂–∫–∏ –Ω–∞ –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["followers"])  # –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å —Ñ–æ–ª–æ–≤–µ—Ä–∞–º–∏

        # –ü–∞—Ä—Å–∏–º –ø—Ä–∏—Ä—ñ—Å—Ç —Ñ–æ–ª–æ–≤–µ—Ä—ñ–≤
        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        # –ü–∞—Ä—Å–∏–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
        def smart_parse_discount(row):
            d = row.get("discount", "")
            if isinstance(d, str) and re.search(r"-\d+%", d):
                return True
            p = row.get("price", "")
            if isinstance(p, str) and re.search(r"-\d+%", p):
                return True
            return False

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        df["has_discount"] = df.apply(smart_parse_discount, axis=1)
        df["followers_gain"] = df["followers"].apply(parse_followers)

        # –¢–∞–±–ª–∏—Ü—ã
        st.subheader("üéØ –Ü–≥—Ä–∏ –±–µ–∑ –∑–Ω–∏–∂–∫–∏")
        st.dataframe(df[df["has_discount"] == False][["name", "followers_gain", "discount", "price"]].sort_values(by="followers_gain", ascending=False))

        st.subheader("üí∏ –Ü–≥—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é")
        st.dataframe(df[df["has_discount"] == True][["name", "followers_gain", "discount", "price"]].sort_values(by="followers_gain", ascending=False))

        # –ì—Ä–∞—Ñ–∏–∫
        q99 = df["followers_gain"].quantile(0.99)
        df_filtered = df[df["followers_gain"] < q99]

        fig, ax = plt.subplots(figsize=(8, 5))
        sns.boxplot(data=df_filtered, x="has_discount", y="followers_gain", ax=ax, palette="autumn")
        ax.set_xlabel("–Ñ –∑–Ω–∏–∂–∫–∞")
        ax.set_ylabel("–ü—Ä–∏—Ä—ñ—Å—Ç —Ñ–æ–ª–æ–≤–µ—Ä—ñ–≤ (7 –¥–Ω—ñ–≤)")
        ax.set_title("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å 7d Gain –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–Ω–∏–∂–∫–∏")
        ax.set_ylim(0, 100_000)
        ax.set_xticklabels(["False", "True"])

        st.pyplot(fig)
        
elif selected == "–¶—ñ–Ω–∞ –≥—Ä–∏ vs –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["price", "followers"])

        def parse_price(x):
            if isinstance(x, str) and "‚Ç¨" in x:
                x = x.replace("‚Ç¨", "").replace(",", ".").strip()
                try:
                    return float(x)
                except:
                    return None
            elif x == "Free":
                return 0.0
            return None

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        df["price_eur"] = df["price"].apply(parse_price)
        df["followers_gain"] = df["followers"].apply(parse_followers)
        df = df.dropna(subset=["price_eur", "followers_gain"])

        # –¢–æ–ø-100 –ø–æ –ø—Ä–∏—Ä–æ—Å—Ç—É
        df_top = df.sort_values(by="followers_gain", ascending=False).head(100)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        st.subheader("üìã –î–∞–Ω—ñ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ (—Ç–æ–ø 100)")
        st.dataframe(df_top[["name", "price", "price_eur", "followers_gain", "discount"]].reset_index(drop=True))

        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.scatterplot(data=df_top, x="price_eur", y="followers_gain", ax=ax, color="orange", s=30)

        from statsmodels.nonparametric.smoothers_lowess import lowess
        lowess_smooth = lowess(df_top["followers_gain"], df_top["price_eur"], frac=0.3)
        ax.plot(lowess_smooth[:, 0], lowess_smooth[:, 1], color="black", linewidth=2)

        ax.set_xlabel("–¶—ñ–Ω–∞ –≥—Ä–∏ (‚Ç¨)")
        ax.set_ylabel("–ü—Ä–∏—Ä—ñ—Å—Ç —Ñ–æ–ª–æ–≤–µ—Ä—ñ–≤")
        ax.set_title("–¶—ñ–Ω–∞ –≥—Ä–∏ vs –ü—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏ (7d Gain)")

        st.pyplot(fig)
elif selected == "–°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–∞ —Ü—ñ–Ω–æ—é —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["price", "followers", "rating"])

        def parse_price(x):
            if isinstance(x, str) and "‚Ç¨" in x:
                x = x.replace("‚Ç¨", "").replace(",", ".").strip()
                try:
                    return float(x)
                except:
                    return None
            elif x == "Free":
                return 0.0
            return None

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        def parse_rating(x):
            if isinstance(x, str) and "%" in x:
                try:
                    return float(x.replace("%", "").replace(",", "."))
                except:
                    return None
            return None

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        df["price_eur"] = df["price"].apply(parse_price)
        df["followers_gain"] = df["followers"].apply(parse_followers)
        df["rating_pct"] = df["rating"].apply(parse_rating)
        df = df.dropna(subset=["price_eur", "followers_gain", "rating_pct"])

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        def price_category(p):
            if p < 15:
                return "Low"
            elif p <= 40:
                return "Mid"
            return "High"

        def rating_category(r):
            if r >= 80:
                return "Positive"
            elif r >= 50:
                return "Mixed"
            return "Negative"

        df["price_cat"] = df["price_eur"].apply(price_category)
        df["rating_cat"] = df["rating_pct"].apply(rating_category)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        pivot = df.groupby(["price_cat", "rating_cat"])["followers_gain"].mean().reset_index()
        pivot.columns = ["–¶—ñ–Ω–∞", "–†–µ–π—Ç–∏–Ω–≥", "–°–µ—Ä–µ–¥–Ω—ñ–π 7d Gain"]

        # –¢–∞–±–ª–∏—Ü–∞ —Å–±–æ–∫—É
        st.subheader("üìã –ß–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        st.dataframe(pivot.sort_values(by="–°–µ—Ä–µ–¥–Ω—ñ–π 7d Gain", ascending=False).reset_index(drop=True))

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(data=pivot, x="–¶—ñ–Ω–∞", y="–°–µ—Ä–µ–¥–Ω—ñ–π 7d Gain", hue="–†–µ–π—Ç–∏–Ω–≥", ax=ax, palette="autumn")
        ax.set_title("–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏—Ä—ñ—Å—Ç —É–≤–∞–≥–∏ (7d Gain) –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ü—ñ–Ω–∏ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—É")
        st.pyplot(fig)
elif selected == "–ß–∏ —Ä—è—Ç—É—î –∑–Ω–∏–∂–∫–∞ –ø–æ–≥–∞–Ω—ñ —ñ–≥—Ä–∏":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["followers", "rating"])

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        def parse_rating(x):
            if isinstance(x, str) and "%" in x:
                try:
                    return float(x.replace("%", "").replace(",", "."))
                except:
                    return None
            return None

        def parse_discount(x):
            if isinstance(x, str) and re.search(r"-\d+%", x):
                return True
            return False

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        df["followers_gain"] = df["followers"].apply(parse_followers)
        df["rating_pct"] = df["rating"].apply(parse_rating)
        df["has_discount"] = df["discount"].apply(parse_discount)
        df = df.dropna(subset=["followers_gain", "rating_pct"])

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ –∏–≥—Ä—ã
        bad_games = df[df["rating_pct"] < 50]

        # –¢–æ–ø-100 –ø–æ –ø—Ä–∏—Ä–æ—Å—Ç—É
        top_bad = bad_games.sort_values(by="followers_gain", ascending=False).head(100)

        # –¢–∞–±–ª–∏—Ü—è
        st.subheader("üìã –î–∞–Ω—ñ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞")
        st.dataframe(top_bad[["name", "followers_gain", "rating", "discount"]].reset_index(drop=True))

        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.boxplot(data=top_bad, x="has_discount", y="followers_gain", ax=ax, palette="autumn")
        ax.set_xlabel("–Ñ –∑–Ω–∏–∂–∫–∞")
        ax.set_ylabel("7d Gain")
        ax.set_title("–ó–Ω–∏–∂–∫–∞ –¥–ª—è —ñ–≥–æ—Ä –∑ –ø–æ–≥–∞–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
        ax.set_xticklabels(["False", "True"])
        ax.set_ylim(0, 20000)

        st.pyplot(fig)

elif selected == "–í–∏–≥—ñ–¥–Ω—ñ—Å—Ç—å –≥—Ä–∏":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["price", "followers"])

        def parse_price(x):
            if isinstance(x, str):
                if "‚Ç¨" in x:
                    x = x.replace("‚Ç¨", "").replace(",", ".").strip()
                    try:
                        return float(x)
                    except:
                        return None
                elif x == "Free":
                    return 0.0
            return None

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        # –ü—Ä–∏–º–µ–Ω—è–µ–º
        df["price_eur"] = df["price"].apply(parse_price)
        df["followers_gain"] = df["followers"].apply(parse_followers)
        df = df.dropna(subset=["price_eur", "followers_gain"])
        df = df[df["price_eur"] > 0]

        # –í—ã–≥–æ–¥–Ω–æ—Å—Ç—å
        df["value_score"] = df["followers_gain"] / df["price_eur"]

        # –¢–æ–ø-100 –ø–æ –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏
        top_value = df.sort_values(by="value_score", ascending=False).head(100)
        top10 = top_value.head(10)


        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –î–∞–Ω—ñ –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à–∏—Ö —ñ–≥–æ—Ä")
        st.dataframe(top10[["name", "followers_gain", "price_eur", "value_score"]].reset_index(drop=True))


        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π barplot
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(data=top10, y="name", x="value_score", palette="pastel", ax=ax)
        ax.set_title("–¢–æ–ø-10 –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à–∏—Ö —ñ–≥–æ—Ä (7d Gain / Price)")
        ax.set_xlabel("–Ü–Ω—Ç–µ—Ä–µ—Å –∑–∞ 1 —î–≤—Ä–æ")
        ax.set_ylabel("–ù–∞–∑–≤–∞ –≥—Ä–∏")

        st.pyplot(fig)
elif selected == "–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ –π –Ω–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏":
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["followers", "rating"])

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        def parse_rating(x):
            if isinstance(x, str) and "%" in x:
                try:
                    return float(x.replace("%", "").replace(",", "."))
                except:
                    return None
            return None

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        df["followers_gain"] = df["followers"].apply(parse_followers)
        df["rating_pct"] = df["rating"].apply(parse_rating)
        df = df.dropna(subset=["followers_gain", "rating_pct"])
        df = df[df["rating_pct"] > 0]  # —É–±—Ä–∞—Ç—å –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0

        # value_index = followers / —Ä–µ–π—Ç–∏–Ω–≥
        df["value_index"] = df["followers_gain"] / df["rating_pct"]

        # –ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ = —Ä–µ–π—Ç–∏–Ω–≥ –≤–∏—Å–æ–∫–∏–π, –ø—Ä–∏—Ä—ñ—Å—Ç –º–∞–ª–∏–π
        overrated = df.sort_values(by="value_index", ascending=True).head(5)

        # –ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω–Ω—ñ = —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∑—å–∫–∏–π, –ø—Ä–∏—Ä—ñ—Å—Ç –≤–∏—Å–æ–∫–∏–π
        underrated = df.sort_values(by="value_index", ascending=False).head(5)
        
        # –¢–∞–±–ª–∏—Ü—ã
        st.subheader("üìã –ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        st.dataframe(overrated[["name", "followers_gain", "rating_pct", "value_index"]].reset_index(drop=True))

        st.subheader("üìã –ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        st.dataframe(underrated[["name", "followers_gain", "rating_pct", "value_index"]].reset_index(drop=True))

        # –î–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        sns.barplot(data=overrated, x="value_index", y="name", ax=ax1, palette="autumn")
        ax1.set_title("–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        ax1.set_xlabel("value_index")
        ax1.set_ylabel("Name")

        sns.barplot(data=underrated, x="value_index", y="name", ax=ax2, palette="spring")
        ax2.set_title("–ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        ax2.set_xlabel("value_index")
        ax2.set_ylabel("")

        st.pyplot(fig)
elif selected == "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ö—ñ—Ç–∏ –∑ –º–∞–ª–∏–º —Ñ–æ–ª–æ–≤–æ–º":
    if os.path.exists(csv_path_raiting):
        df = pd.read_csv(csv_path_raiting)
        df = df.dropna(subset=["price", "followers", "owners"])  # –≤ owners –º—ã –±–µ—Ä—ë–º peak

        def parse_price(x):
            if isinstance(x, str):
                if "‚Ç¨" in x:
                    x = x.replace("‚Ç¨", "").replace(",", ".").strip()
                    try:
                        return float(x)
                    except:
                        return None
                elif x == "Free":
                    return 0.0
            return None

        def parse_followers(x):
            if isinstance(x, str):
                digits = re.sub(r"[^\d]", "", x)
                if digits:
                    return int(digits)
            return None

        def parse_peak(x):
            if isinstance(x, str):
                digits = re.sub(r"[^\d]", "", x)
                if digits:
                    return int(digits)
            return None

        df["price_eur"] = df["price"].apply(parse_price)
        df["followers_num"] = df["followers"].apply(parse_followers)
        df["peak_num"] = df["owners"].apply(parse_peak)  # –∑–¥–µ—Å—å peak –æ–Ω–ª–∞–π–Ω
        df = df.dropna(subset=["price_eur", "followers_num", "peak_num"])
        df = df[(df["followers_num"] > 0) & (df["price_eur"] > 0)]

        # KPI = peak / followers (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        df["peak_ratio"] = df["peak_num"] / df["followers_num"]

        # –û–±—Ä–µ–∑–∞–µ–º
        top_under = df.sort_values(by="peak_ratio", ascending=False).head(5)
        top_over = df.sort_values(by="peak_ratio", ascending=True).head(5)


        # –¢–∞–±–ª–∏—Ü—ã
        st.subheader("üìã –ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        st.dataframe(top_over[["name", "followers_num", "peak_num", "peak_ratio"]].reset_index(drop=True))

        st.subheader("üìã –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ö—ñ—Ç–∏")
        st.dataframe(top_under[["name", "followers_num", "peak_num", "peak_ratio"]].reset_index(drop=True))


        # –î–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        sns.barplot(data=top_over, x="peak_ratio", y="name", ax=ax1, palette="Reds")
        ax1.set_title("–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        ax1.set_xlabel("Peak / Followers")

        sns.barplot(data=top_under, x="peak_ratio", y="name", ax=ax2, palette="Greens")
        ax2.set_title("–ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω—ñ —ñ–≥—Ä–∏")
        ax2.set_xlabel("Peak / Followers")

        st.pyplot(fig)
        
elif selected == "–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≥—Ä–∏":
    if os.path.exists(csv_path):
        import datetime

        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["followers", "release_date"])

        def parse_followers(x):
            if isinstance(x, str):
                x = re.sub(r"[^\d+]", "", x)
                if "+" in x:
                    return int(x.replace("+", ""))
                return int(x)
            return None

        def parse_release_date(x):
            try:
                return pd.to_datetime(x)
            except:
                return None

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = pd.to_datetime("today")

        df["followers_num"] = df["followers"].apply(parse_followers)
        df["release_date_parsed"] = df["release_date"].apply(parse_release_date)
        df["days_since_release"] = (today - df["release_date_parsed"]).dt.days
        df = df.dropna(subset=["followers_num", "days_since_release"])
        df = df[df["days_since_release"] > 0]

        # –ò–Ω–¥–µ–∫—Å –∑–∞–ø—É—Å–∫—É
        df["launch_index"] = df["followers_num"] / df["days_since_release"]

        # –¢–æ–ø-100 –ø–æ launch_index
        top_launch = df.sort_values(by="launch_index", ascending=False).head(10)

        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(data=top_launch, x="launch_index", y="name", palette="Blues", ax=ax)
        ax.set_title("–¢–æ–ø-10 –∑–∞–ø—É—Å–∫—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é")
        ax.set_xlabel("–Ü–Ω–¥–µ–∫—Å –∑–∞–ø—É—Å–∫—É")
        ax.set_ylabel("–ù–∞–∑–≤–∞ –≥—Ä–∏")

        st.pyplot(fig)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –î–∞–Ω—ñ –∑–∞–ø—É—Å–∫—ñ–≤")
        st.dataframe(top_launch[["name", "followers_num", "release_date", "days_since_release", "launch_index"]].reset_index(drop=True))
        
elif selected == "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥ + —Ü—ñ–Ω–∞ vs –æ–Ω–ª–∞–π–Ω":
    if os.path.exists(csv_path_raiting):
        df = pd.read_csv(csv_path_raiting)
        df = df.dropna(subset=["price", "rating", "owners"])

        def parse_price(x):
            if isinstance(x, str):
                if "‚Ç¨" in x:
                    x = x.replace("‚Ç¨", "").replace(",", ".").strip()
                    try:
                        return float(x)
                    except:
                        return None
                elif x == "Free":
                    return 0.0
            return None

        def parse_rating(x):
            if isinstance(x, str) and "%" in x:
                try:
                    return float(x.replace("%", "").replace(",", "."))
                except:
                    return None
            return None

        def parse_peak(x):
            if isinstance(x, str):
                digits = re.sub(r"[^\d]", "", x)
                if digits:
                    return int(digits)
            return None


        df["price_eur"] = df["price"].apply(parse_price)
        df["rating_pct"] = df["rating"].apply(parse_rating)
        df["peak"] = df["owners"].apply(parse_peak)

        df = df.dropna(subset=["price_eur", "rating_pct", "peak"])

        def price_category(p):
            if p < 15:
                return "Low"
            elif p <= 40:
                return "Mid"
            return "High"

        def rating_category(r):
            if r >= 80:
                return "Positive"
            elif r >= 50:
                return "Mixed"
            return "Negative"

        df["price_cat"] = df["price_eur"].apply(price_category)
        df["rating_cat"] = df["rating_pct"].apply(rating_category)
        
        pivot = df.pivot_table(index="rating_cat", columns="price_cat", values="peak", aggfunc="mean")
        
        if not pivot.empty:
            fig, ax = plt.subplots(figsize=(8, 5))
            st.subheader("üìã –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è")
            st.dataframe(pivot.reset_index())
            sns.heatmap(pivot, annot=True, fmt=".0f", cmap="Blues", ax=ax)
            ax.set_title("–°–µ—Ä–µ–¥–Ω—ñ–π –ø—ñ–∫ –æ–Ω–ª–∞–π–Ω—É: —Ä–µ–π—Ç–∏–Ω–≥ + —Ü—ñ–Ω–∞")
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏.")
elif selected == "–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –≥—Ä–∏":
    if os.path.exists(csv_path):
        import datetime

        df = pd.read_csv(csv_path)
        df = df.dropna(subset=["followers", "release_date"])

        def parse_followers(x):
            if isinstance(x, str):
                digits = re.sub(r"[^\d]", "", x)
                if digits:
                    return int(digits)
            return None

        def parse_release_date(x):
            try:
                return pd.to_datetime(x)
            except:
                return None

        today = pd.to_datetime("today")

        df["followers_num"] = df["followers"].apply(parse_followers)
        df["release_date_parsed"] = df["release_date"].apply(parse_release_date)
        df["days_since_release"] = (today - df["release_date_parsed"]).dt.days

        df = df.dropna(subset=["followers_num", "days_since_release"])
        df = df[df["days_since_release"] > 0]

        df["launch_index"] = df["followers_num"] / df["days_since_release"]

        top_launch = df.sort_values(by="launch_index", ascending=False).head(10)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –î–µ—Ç–∞–ª—ñ –∑–∞–ø—É—Å–∫—É (—Ç–æ–ø-10)")
        st.dataframe(top_launch[["name", "followers_num", "release_date", "days_since_release", "launch_index"]].reset_index(drop=True))


        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(data=top_launch, x="launch_index", y="name", palette="pastel", ax=ax)
        ax.set_title("–¢–æ–ø-10 –∑–∞–ø—É—Å–∫—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é")
        ax.set_xlabel("–Ü–Ω–¥–µ–∫—Å –∑–∞–ø—É—Å–∫—É")
        ax.set_ylabel("–ù–∞–∑–≤–∞ –≥—Ä–∏")

        st.pyplot(fig)



    else:
        st.error(f"‚ùå CSV-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: `{csv_path}`")
